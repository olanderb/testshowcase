---
title: "Humanitarian Response Plan 2023"
author: "Bill Olander"
date: "2024-01-15"
categories: [table, api]
format:
  html:
    css: styles.css
    code-fold: true
    code-summary: "Show the code"

execute:
  warning: false
  
---

## Background

Here I recreate the table showing *Funding of 2023 Response Plans* in the [Global Humanitarian Overview 2024](https://reliefweb.int/report/world/global-humanitarian-overview-2024-enarfres) using the R packages *reactable* and *htmltools*

![](images/clipboard-2147009209.png)

## Steps

The main steps were:

Connect the Humanitarian Data Exchange to download the funding data
```{r download funding}
# URL of the Excel file on HDX
url <- "https://data.humdata.org/dataset/6cb35657-975e-46a0-99a7-a558eddb924f/resource/28be64d3-adaf-4f61-887c-87a8b5d9c625/download/section3_plan_tables_2024-n.xlsx"
# Define the destination path where to save the file
destfile <- "section3_plan_tables_2024-n.xlsx"
# Use download.file() function to download the file
download.file(url, destfile, mode="wb")
```

Import the data, perform some easy exploration (because the data is clean and simple) and do a little reformatting of the data
```{r import and format}
library(readxl)
library(dplyr)
# import Excel file 
data <- read_excel("section3_plan_tables_2024-n.xlsx", 
                                          skip = 1)

#str(data)
#format to number and get rid of commas
data <- data %>%
  mutate(across(`People in need`:`Coverage (%)`, ~ as.numeric(gsub(",", "", .x))))
#for % - multiplies by 100 and rounds to the nearest whole number
data <- data %>%
  mutate(`Coverage (%)` = round(`Coverage (%)` * 100, 0)) 
#filter only country level Humanitarian Response Plans
data <- data %>% filter(`Plan type` == "HRP")
```


Create a *reactable* and spend a lot of hours trying to tweak html and css to make the table below
```{r reactable}
library(reactable)
library(htmltools)

# Custom function to format numbers with K, M, B abbreviations
format_custom <- function(x) {
   ifelse(x >= 1e9, paste0(format(round(x / 1e9, 1), nsmall = 1), "B"),
          ifelse(x >= 1e6, paste0(format(round(x / 1e6, 1), nsmall = 1), "M"),
                 ifelse(x >= 1e3, paste0(format(round(x / 1e3, 1), nsmall = 1), "K"), x)))
 }

# Update the bar_chart function specifically for handling the Coverage (%) column correctly
bar_chart <- function(label, value, max_value, fill = "#ffc107", include_background = FALSE) {
  # Check if the label already contains a '%' symbol, indicating it's from the Coverage (%) column
  formatted_label <- if(grepl("%$", label)) {
    label  # If label already has a '%', use it as is
  } else {
    format_custom(value)  # Use custom formatting for other numeric values
  }
  
  label_div <- div(style = list(width = "80px", textAlign = "right", display = "inline-block"), HTML(formatted_label))
  
  width <- paste0(min((value / max_value) * 100, 100), "%")
  bar_style <- list(background = fill, width = width, height = "20px")
  bar <- div(style = bar_style)
  
  background_style <- list(display = "inline-block", width = "calc(100% - 85px)", height = "20px", marginLeft = "5px", background = if (include_background) "#e1e1e1" else "transparent")
  background <- div(style = background_style, bar)
  
  div(style = list(display = "flex", alignItems = "center"), label_div, background)
}


# Calculate max values for each column to scale the bar charts appropriately
max_values <- sapply(data[, c("People in need", "People targeted", "Requirements (US$)", "Funding (US$)", "Coverage (%)")], max, na.rm = TRUE)

# Create the reactable table with formatted numbers and aligned bars
react_table <- reactable(
  data,
  pagination = FALSE,
  defaultPageSize = nrow(data),  # Set page size to the number of rows in your data
  width = '100%',
  columns = list(
    Plan = colDef(
      defaultSortOrder = "asc",
      minWidth = 200,
      headerStyle = list(fontWeight = 700),
      cell = function(value, index) {
        div(
          class = "plan",
          img(class = "plan-flag", alt = paste(value, "flag"), src = sprintf("images/%s.png", value)),
          div(
            span(class = "plan-name", value),
          )
        )
      },
      html = TRUE
    ),
    `Plan type` = colDef(name = "Plan type", minWidth = 100),
    `People in need` = colDef(
      name = "People in need",
      minWidth = 150,
      cell = function(value) bar_chart(value, value, max_values["People in need"], fill = "#ffc107", include_background = FALSE),
      html = TRUE
    ),
    `People targeted` = colDef(
      name = "People targeted",
      minWidth = 200,
      cell = function(value) bar_chart(value, value, max_values["People targeted"], fill = "#ffc107", include_background = FALSE),
      html = TRUE
    ),
    `Requirements (US$)` = colDef(
      name = "Requirements (US$)",
      minWidth = 200,
      cell = function(value) bar_chart(value, value, max_values["Requirements (US$)"], fill = "#ffc107", include_background = FALSE),
      html = TRUE
    ),
    `Funding (US$)` = colDef(
      name = "Funding (US$)",
      minWidth = 200,
      cell = function(value) bar_chart(value, value, max_values["Funding (US$)"], fill = "#ffc107", include_background = FALSE),
      html = TRUE
    ),
    `Coverage (%)` = colDef(
      name = "Coverage (%)",
      minWidth = 200,
      cell = function(value) {
        # Format the value as a whole number without decimals and append a '%' symbol
        formatted_value_with_percent <- sprintf("%d%%", round(value))
        # Pass the formatted whole number value with '%' to the bar_chart function
        bar_chart(formatted_value_with_percent, value, max_values["Coverage (%)"], fill = "#ffc107", include_background = TRUE)
      },
      html = TRUE
    )
  )
)

# Add a link to the Open Sans font from Google Fonts
google_font_link <- tags$link(href = "https://fonts.googleapis.com/css?family=Open+Sans:400,700", rel = "stylesheet")

# Update the styles for the title and subtitle to use Open Sans
title <- tags$h1("Humanitarian Response Plans 2023", 
                 style = "text-align: left; font-family: 'Open Sans', sans-serif;")

subtitle <- tags$h3("Funding and Coverage Overview", 
                    style = "text-align: left; margin-top: -10px; font-family: 'Open Sans', sans-serif;  font-weight: 500;")


# Combine title, subtitle, Google font link, custom CSS, and the reactable table
complete_table_with_title <- tagList(
  google_font_link,
  title,
  subtitle,
  react_table
)

```


## Voila 

*make sure to click on the column name to sort !* 

*i'm not happy with sizing and still cant get it to fully fit - working on it !* 

```{r show, echo=FALSE}
browsable(complete_table_with_title)
```

## Thanks to:

[Building the Twitter Followers Demo](https://glin.github.io/reactable/articles/building-twitter-followers.html)

[2019 Women's World Cup Predictions](https://glin.github.io/reactable/articles/womens-world-cup/womens-world-cup.html)
